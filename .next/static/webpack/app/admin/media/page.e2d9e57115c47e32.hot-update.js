"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/media/page",{

/***/ "(app-pages-browser)/./src/app/admin/hooks/useMediaManager.ts":
/*!************************************************!*\
  !*** ./src/app/admin/hooks/useMediaManager.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMediaManager: () => (/* binding */ useMediaManager)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// src/app/admin/hooks/useMediaManager.ts\n\n// Fonction de normalisation des tags\nconst normalizeTags = (tags)=>{\n    if (!tags) return []; // Gère null ou undefined\n    if (Array.isArray(tags)) {\n        return tags.flatMap((tag)=>tag.split(',').map((t)=>t.trim())).filter((t)=>t.length > 0);\n    }\n    const trimmed = tags.trim();\n    if (trimmed === 'null' || trimmed === '') return []; // Gère \"null\" ou chaîne vide\n    if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n        try {\n            const parsed = JSON.parse(trimmed);\n            if (Array.isArray(parsed)) {\n                return parsed.flatMap((tag)=>typeof tag === 'string' ? tag.split(',').map((t)=>t.trim()) : []).filter((t)=>t.length > 0);\n            }\n        } catch (e) {\n            console.error('Error parsing JSON tags:', e);\n        }\n    }\n    return trimmed.split(/[,\\s]+/).map((t)=>t.trim()).filter((t)=>t.length > 0);\n};\nfunction useMediaManager(extendedSession) {\n    const [media, setMedia] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [pendingFiles, setPendingFiles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [folders, setFolders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        {\n            name: 'Dossier principal',\n            media: []\n        }\n    ]);\n    const [currentFolder, setCurrentFolder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('Dossier principal');\n    const [selectedMedia, setSelectedMedia] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [tags, setTags] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedTagInput, setSelectedTagInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [description, setDescription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Synchronise tags et description lorsque selectedMedia change, avec logs détaillés\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaManager.useEffect\": ()=>{\n            if (selectedMedia) {\n                console.log('Selected media changed (before update):', {\n                    selectedMedia,\n                    currentTags: tags,\n                    currentDescription: description\n                });\n                const newTags = normalizeTags(selectedMedia.tags);\n                const newDescription = selectedMedia.description || '';\n                console.log('Updating tags and description:', {\n                    newTags,\n                    newDescription\n                });\n                setTags(newTags);\n                setDescription(newDescription);\n                setSelectedTagInput(''); // Réinitialise l'input des tags\n                console.log('Updated states:', {\n                    tags: newTags,\n                    description: newDescription\n                });\n            } else {\n                console.log('No selected media, resetting states');\n                setTags([]);\n                setDescription('');\n                setSelectedTagInput('');\n            }\n        }\n    }[\"useMediaManager.useEffect\"], [\n        selectedMedia\n    ]);\n    const loadMedia = async ()=>{\n        setIsLoading(true);\n        try {\n            console.log('Loading media...');\n            const res = await fetch('/api/media');\n            if (!res.ok) throw new Error(\"Failed to fetch media: \".concat(res.status));\n            const data = await res.json();\n            console.log('Raw media data:', data); // Log complet pour voir la structure\n            const { media: mediaData } = data;\n            // Traitement des médias avec normalisation des tags et description\n            const processedMedia = mediaData.map((item)=>({\n                    ...item,\n                    tags: normalizeTags(item.tags),\n                    description: item.description || ''\n                }));\n            console.log('Processed media with tags and description:', processedMedia);\n            setMedia(processedMedia);\n            updateFolders(processedMedia); // Utiliser les médias traités ici\n        } catch (err) {\n            console.error(err);\n            setError('Erreur lors du chargement des médias');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const updateFolders = (mediaList)=>{\n        const folderMap = {};\n        mediaList.forEach((mediaItem)=>{\n            const folderName = mediaItem.associated_with || 'Dossier principal';\n            if (!folderMap[folderName]) folderMap[folderName] = [];\n            folderMap[folderName].push(mediaItem);\n        });\n        setFolders(Object.entries(folderMap).map((param)=>{\n            let [name, media] = param;\n            return {\n                name,\n                media\n            };\n        }));\n        if (!folderMap[currentFolder]) {\n            setCurrentFolder('Dossier principal');\n        }\n    };\n    const uploadFiles = async ()=>{\n        setIsLoading(true);\n        try {\n            for (const pendingFile of pendingFiles){\n                const formData = new FormData();\n                formData.append('files', pendingFile.file);\n                formData.append('userId', extendedSession.user.id);\n                formData.append('type', 'media');\n                formData.append('folder', pendingFile.folder);\n                formData.append('tags', JSON.stringify(pendingFile.tags));\n                formData.append('description', pendingFile.description);\n                const res = await fetch('/api/uploads', {\n                    method: 'POST',\n                    body: formData\n                });\n                if (!res.ok) throw new Error(\"Failed to upload file \".concat(pendingFile.file.name, \": \").concat(res.status));\n            }\n            setPendingFiles([]);\n            await loadMedia();\n            setError(null);\n        } catch (err) {\n            console.error(err);\n            setError('Erreur lors de l’upload des fichiers');\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const saveMediaEdits = async ()=>{\n        if (selectedMedia) {\n            try {\n                const res = await fetch('/api/media', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: selectedMedia.id,\n                        folder: currentFolder,\n                        tags: tags,\n                        description: description\n                    })\n                });\n                if (!res.ok) throw new Error(\"Failed to update media: \".concat(res.status));\n                await loadMedia();\n                setSelectedMedia(null);\n                setTags([]);\n                setDescription('');\n                setSelectedTagInput('');\n            } catch (err) {\n                console.error(err);\n                setError('Erreur lors de la mise à jour du média');\n            }\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaManager.useEffect\": ()=>{\n            if (extendedSession && extendedSession.user) {\n                loadMedia();\n            }\n        }\n    }[\"useMediaManager.useEffect\"], [\n        extendedSession\n    ]);\n    return {\n        media,\n        pendingFiles,\n        folders,\n        currentFolder,\n        selectedMedia,\n        tags,\n        selectedTagInput,\n        description,\n        isLoading,\n        error,\n        setPendingFiles,\n        setCurrentFolder,\n        setSelectedMedia,\n        setTags,\n        setSelectedTagInput,\n        setDescription,\n        loadMedia,\n        uploadFiles,\n        updateFolders,\n        saveMediaEdits,\n        setError\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/admin/hooks/useMediaManager.ts\n"));

/***/ })

});